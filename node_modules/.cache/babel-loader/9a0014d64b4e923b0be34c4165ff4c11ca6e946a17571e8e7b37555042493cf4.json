{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport request from '@/utils/request';\nexport const registerApi = async (username, password, email) => {\n  try {\n    console.log('Username:', username);\n    console.log('Password:', password);\n    console.log('Email:', email);\n\n    // 发送 POST 请求\n    const response = await request.post('https://67e68b326530dbd311106be9.mockapi.io/users', {\n      username,\n      password,\n      email\n    });\n    console.log('注册成功，返回的数据:', response); // 输出注册成功的响应数据\n    return response;\n  } catch (error) {\n    // 捕获错误并返回错误信息\n    console.error('注册请求失败:', error.response || error.message);\n    throw new Error('注册失败，请稍后再试');\n  }\n};\n\n// 用户名规范\nexport const validUsername = async username => {\n  // 校验用户名长度\n  if (username.length > 8) {\n    return '用户名不能超过8位';\n  }\n  try {\n    const response = await request.get('/users'); // 获取所有用户数据\n    // 在返回的用户列表中查找是否有重复的用户名\n    const existUser = response.find(user => user.username === username);\n    if (existUser) {\n      return '用户名已存在';\n    }\n    return true; // 返回true表示用户名是有效的\n  } catch (error) {\n    console.error('检查用户名时出错', error);\n    return '用户名校验失败';\n  }\n};\n\n// 邮箱规范\nexport const vaildEmail = async email => {\n  const response = await request.get('/users');\n  const emailCheck = response.find(user => user.email === email);\n  if (emailCheck) {\n    return '邮箱名已经被注册';\n  }\n  // 校验邮箱格式，使用正则表达式\n  const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;\n  if (!emailRegex.test(email)) {\n    return '请输入有效的邮箱地址';\n  }\n  if (emailCheck) {\n    return '该邮箱已被注册';\n  }\n  return true;\n};\n\n// 校验密码\nexport function validatePassword(password) {\n  const minLength = 6;\n  const maxLength = 20;\n  if (password.length < minLength || password.length > maxLength) {\n    return `密码长度应为 ${minLength} 到 ${maxLength} 个字符`;\n  }\n  // 可以添加复杂度校验，例如包含字母和数字\n  const regex = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{6,20}$/;\n  if (!regex.test(password)) {\n    return '密码必须包含字母和数字';\n  }\n  return true;\n}\nexport default registerApi;","map":{"version":3,"names":["request","registerApi","username","password","email","console","log","response","post","error","message","Error","validUsername","length","get","existUser","find","user","vaildEmail","emailCheck","emailRegex","test","validatePassword","minLength","maxLength","regex"],"sources":["D:/xz-website/src/api/register.js"],"sourcesContent":["import request from '@/utils/request'\r\n\r\nexport const registerApi = async (username, password, email) => {\r\n  try {\r\n    console.log('Username:', username)\r\n    console.log('Password:', password)\r\n    console.log('Email:', email)\r\n\r\n    // 发送 POST 请求\r\n    const response = await request.post('https://67e68b326530dbd311106be9.mockapi.io/users', {\r\n      username,\r\n      password,\r\n      email\r\n    })\r\n    console.log('注册成功，返回的数据:', response) // 输出注册成功的响应数据\r\n    return response\r\n  } catch (error) {\r\n    // 捕获错误并返回错误信息\r\n    console.error('注册请求失败:', error.response || error.message)\r\n    throw new Error('注册失败，请稍后再试')\r\n  }\r\n}\r\n\r\n// 用户名规范\r\nexport const validUsername = async username => {\r\n  // 校验用户名长度\r\n  if (username.length > 8) {\r\n    return '用户名不能超过8位'\r\n  }\r\n\r\n  try {\r\n    const response = await request.get('/users') // 获取所有用户数据\r\n    // 在返回的用户列表中查找是否有重复的用户名\r\n    const existUser = response.find(user => user.username === username)\r\n    if (existUser) {\r\n      return '用户名已存在'\r\n    }\r\n\r\n    return true // 返回true表示用户名是有效的\r\n  } catch (error) {\r\n    console.error('检查用户名时出错', error)\r\n    return '用户名校验失败'\r\n  }\r\n}\r\n\r\n// 邮箱规范\r\nexport const vaildEmail = async email => {\r\n  const response = await request.get('/users')\r\n  const emailCheck = response.find(user => user.email === email)\r\n  if (emailCheck) {\r\n    return '邮箱名已经被注册'\r\n  }\r\n  // 校验邮箱格式，使用正则表达式\r\n  const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/\r\n  if (!emailRegex.test(email)) {\r\n    return '请输入有效的邮箱地址'\r\n  }\r\n  if (emailCheck) {\r\n    return '该邮箱已被注册'\r\n  }\r\n  return true\r\n}\r\n\r\n// 校验密码\r\nexport function validatePassword (password) {\r\n  const minLength = 6\r\n  const maxLength = 20\r\n  if (password.length < minLength || password.length > maxLength) {\r\n    return `密码长度应为 ${minLength} 到 ${maxLength} 个字符`\r\n  }\r\n  // 可以添加复杂度校验，例如包含字母和数字\r\n  const regex = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{6,20}$/\r\n  if (!regex.test(password)) {\r\n    return '密码必须包含字母和数字'\r\n  }\r\n  return true\r\n}\r\n\r\nexport default registerApi\r\n"],"mappings":";;AAAA,OAAOA,OAAO,MAAM,iBAAiB;AAErC,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,EAAEC,KAAK,KAAK;EAC9D,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEJ,QAAQ,CAAC;IAClCG,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEH,QAAQ,CAAC;IAClCE,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEF,KAAK,CAAC;;IAE5B;IACA,MAAMG,QAAQ,GAAG,MAAMP,OAAO,CAACQ,IAAI,CAAC,mDAAmD,EAAE;MACvFN,QAAQ;MACRC,QAAQ;MACRC;IACF,CAAC,CAAC;IACFC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEC,QAAQ,CAAC,EAAC;IACrC,OAAOA,QAAQ;EACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd;IACAJ,OAAO,CAACI,KAAK,CAAC,SAAS,EAAEA,KAAK,CAACF,QAAQ,IAAIE,KAAK,CAACC,OAAO,CAAC;IACzD,MAAM,IAAIC,KAAK,CAAC,YAAY,CAAC;EAC/B;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAG,MAAMV,QAAQ,IAAI;EAC7C;EACA,IAAIA,QAAQ,CAACW,MAAM,GAAG,CAAC,EAAE;IACvB,OAAO,WAAW;EACpB;EAEA,IAAI;IACF,MAAMN,QAAQ,GAAG,MAAMP,OAAO,CAACc,GAAG,CAAC,QAAQ,CAAC,EAAC;IAC7C;IACA,MAAMC,SAAS,GAAGR,QAAQ,CAACS,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACf,QAAQ,KAAKA,QAAQ,CAAC;IACnE,IAAIa,SAAS,EAAE;MACb,OAAO,QAAQ;IACjB;IAEA,OAAO,IAAI,EAAC;EACd,CAAC,CAAC,OAAON,KAAK,EAAE;IACdJ,OAAO,CAACI,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;IAChC,OAAO,SAAS;EAClB;AACF,CAAC;;AAED;AACA,OAAO,MAAMS,UAAU,GAAG,MAAMd,KAAK,IAAI;EACvC,MAAMG,QAAQ,GAAG,MAAMP,OAAO,CAACc,GAAG,CAAC,QAAQ,CAAC;EAC5C,MAAMK,UAAU,GAAGZ,QAAQ,CAACS,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACb,KAAK,KAAKA,KAAK,CAAC;EAC9D,IAAIe,UAAU,EAAE;IACd,OAAO,UAAU;EACnB;EACA;EACA,MAAMC,UAAU,GAAG,iDAAiD;EACpE,IAAI,CAACA,UAAU,CAACC,IAAI,CAACjB,KAAK,CAAC,EAAE;IAC3B,OAAO,YAAY;EACrB;EACA,IAAIe,UAAU,EAAE;IACd,OAAO,SAAS;EAClB;EACA,OAAO,IAAI;AACb,CAAC;;AAED;AACA,OAAO,SAASG,gBAAgBA,CAAEnB,QAAQ,EAAE;EAC1C,MAAMoB,SAAS,GAAG,CAAC;EACnB,MAAMC,SAAS,GAAG,EAAE;EACpB,IAAIrB,QAAQ,CAACU,MAAM,GAAGU,SAAS,IAAIpB,QAAQ,CAACU,MAAM,GAAGW,SAAS,EAAE;IAC9D,OAAO,UAAUD,SAAS,MAAMC,SAAS,MAAM;EACjD;EACA;EACA,MAAMC,KAAK,GAAG,0CAA0C;EACxD,IAAI,CAACA,KAAK,CAACJ,IAAI,CAAClB,QAAQ,CAAC,EAAE;IACzB,OAAO,aAAa;EACtB;EACA,OAAO,IAAI;AACb;AAEA,eAAeF,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}