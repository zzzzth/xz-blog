{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport { sample } from 'lodash';\nimport rainEffect from '@/components/rainEffect.vue';\nimport Navbar from '@/components/Navbar.vue';\nimport DownTips from '@/components/DownTips.vue';\nimport { getTalk } from '@/api/getTalk';\nimport Avater from '@/components/Avater.vue';\nexport default {\n  name: 'LayoutIndex',\n  components: {\n    rainEffect,\n    Navbar,\n    DownTips,\n    Avater\n  },\n  data() {\n    return {\n      isVideoPlaying: false,\n      isScrolled: false,\n      poetry: 'Âä†ËΩΩ‰∏≠......',\n      currentWallpaper: '',\n      videoSrc: process.env.VUE_APP_VIDEO_PATH,\n      wallpapers: [`${process.env.VUE_APP_WALLPAPER_PATH}/4kwallpaper-1.jpg`, `${process.env.VUE_APP_WALLPAPER_PATH}/4kwallpaper-2.jpg`]\n    };\n  },\n  computed: {\n    isHomepage() {\n      return this.$route.path === '/';\n    }\n  },\n  mounted() {\n    this.currentWallpaper = this.getRandomImage();\n    this.preloadImages();\n    window.addEventListener('scroll', this.handleScroll);\n    getTalk(poetry => {\n      this.poetry = poetry;\n    });\n  },\n  beforeDestroy() {\n    window.removeEventListener('scroll', this.handleScroll);\n  },\n  methods: {\n    handleScroll() {\n      this.isScrolled = window.scrollY > 100;\n    },\n    playVideo() {\n      this.isVideoPlaying = true;\n      this.requestFullscreen(this.$refs.video);\n    },\n    closeVideo() {\n      this.isVideoPlaying = false;\n      this.exitFullscreen();\n    },\n    requestFullscreen(element) {\n      if (element.requestFullscreen) element.requestFullscreen();else if (element.mozRequestFullScreen) element.mozRequestFullScreen();else if (element.webkitRequestFullscreen) element.webkitRequestFullscreen();else if (element.msRequestFullscreen) element.msRequestFullscreen();\n    },\n    exitFullscreen() {\n      if (document.exitFullscreen) document.exitFullscreen();else if (document.mozCancelFullScreen) document.mozCancelFullScreen();else if (document.webkitExitFullscreen) document.webkitExitFullscreen();else if (document.msExitFullscreen) document.msExitFullscreen();\n    },\n    getRandomImage() {\n      const lastIndex = localStorage.getItem('wallpaperIndex');\n      let randomIndex;\n      do {\n        randomIndex = this.wallpapers.indexOf(sample(this.wallpapers));\n      } while (lastIndex === randomIndex);\n      localStorage.setItem('wallpaperIndex', randomIndex);\n      return this.wallpapers[randomIndex];\n    },\n    preloadImages() {\n      this.wallpapers.forEach(url => {\n        const img = new Image();\n        img.src = url;\n        img.onload = () => {\n          console.log(`${url}È¢ÑÂä†ËΩΩÂÆåÊàê`);\n        };\n      });\n    }\n  }\n};","map":{"version":3,"names":["sample","rainEffect","Navbar","DownTips","getTalk","Avater","name","components","data","isVideoPlaying","isScrolled","poetry","currentWallpaper","videoSrc","process","env","VUE_APP_VIDEO_PATH","wallpapers","VUE_APP_WALLPAPER_PATH","computed","isHomepage","$route","path","mounted","getRandomImage","preloadImages","window","addEventListener","handleScroll","beforeDestroy","removeEventListener","methods","scrollY","playVideo","requestFullscreen","$refs","video","closeVideo","exitFullscreen","element","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","document","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","lastIndex","localStorage","getItem","randomIndex","indexOf","setItem","forEach","url","img","Image","src","onload","console","log"],"sources":["src/views/layout/index.vue"],"sourcesContent":["<template>\r\n  <div class=\"maincage\" :style=\"{backgroundImage : `url(${currentWallpaper})`}\">\r\n    <rainEffect></rainEffect>\r\n    <header>\r\n      <div :class=\"['head', { 'scrolled': isScrolled }]\">\r\n        <div class=\"logo\" @click=\"playVideo\">\r\n          <img src=\"@/assets/‰ΩêÂä©.webp\" alt=\"\">\r\n          AHAO BLOG\r\n        </div>\r\n        <Navbar></Navbar>\r\n        <div v-if=\"isVideoPlaying\" class=\"video-container\">\r\n          <video ref=\"video\" autoplay loading=\"lazy\">\r\n            <source :src=\"videoSrc\" type=\"video/mp4\">\r\n            ÊÇ®ÁöÑÊµèËßàÂô®‰∏çÊîØÊåÅËßÜÈ¢ëÊí≠Êîæ„ÄÇ\r\n          </video>\r\n          <button @click=\"closeVideo\" class=\"close-btn\">\r\n            <i class=\"fas fa-times\"></i>\r\n          </button>\r\n        </div>\r\n        <Avater></Avater>\r\n      </div>\r\n    </header>\r\n    <div v-if=\"isHomepage\" class=\"poetry-container\">\r\n      <p>üìú ÊØèÊó•ËØóËØç</p>\r\n      {{ poetry }}\r\n    </div>\r\n    <main class=\"content-container\">\r\n      <DownTips v-show=\"!isHomepage\"></DownTips>\r\n      <router-view :key=\"$route.fullPath\"></router-view>\r\n    </main>\r\n    <footer></footer>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { sample } from 'lodash'\r\nimport rainEffect from '@/components/rainEffect.vue'\r\nimport Navbar from '@/components/Navbar.vue'\r\nimport DownTips from '@/components/DownTips.vue'\r\nimport { getTalk } from '@/api/getTalk'\r\nimport Avater from '@/components/Avater.vue'\r\n\r\nexport default {\r\n  name: 'LayoutIndex',\r\n  components: {\r\n    rainEffect,\r\n    Navbar,\r\n    DownTips,\r\n    Avater\r\n  },\r\n  data () {\r\n    return {\r\n      isVideoPlaying: false,\r\n      isScrolled: false,\r\n      poetry: 'Âä†ËΩΩ‰∏≠......',\r\n      currentWallpaper: '',\r\n      videoSrc: process.env.VUE_APP_VIDEO_PATH,\r\n      wallpapers: [\r\n        `${process.env.VUE_APP_WALLPAPER_PATH}/4kwallpaper-1.jpg`,\r\n        `${process.env.VUE_APP_WALLPAPER_PATH}/4kwallpaper-2.jpg`\r\n      ]\r\n    }\r\n  },\r\n  computed: {\r\n    isHomepage () {\r\n      return this.$route.path === '/'\r\n    }\r\n  },\r\n  mounted () {\r\n    this.currentWallpaper = this.getRandomImage()\r\n    this.preloadImages()\r\n    window.addEventListener('scroll', this.handleScroll)\r\n    getTalk(poetry => {\r\n      this.poetry = poetry\r\n    })\r\n  },\r\n  beforeDestroy () {\r\n    window.removeEventListener('scroll', this.handleScroll)\r\n  },\r\n  methods: {\r\n    handleScroll () {\r\n      this.isScrolled = window.scrollY > 100\r\n    },\r\n    playVideo () {\r\n      this.isVideoPlaying = true\r\n      this.requestFullscreen(this.$refs.video)\r\n    },\r\n    closeVideo () {\r\n      this.isVideoPlaying = false\r\n      this.exitFullscreen()\r\n    },\r\n    requestFullscreen (element) {\r\n      if (element.requestFullscreen) element.requestFullscreen()\r\n      else if (element.mozRequestFullScreen) element.mozRequestFullScreen()\r\n      else if (element.webkitRequestFullscreen) element.webkitRequestFullscreen()\r\n      else if (element.msRequestFullscreen) element.msRequestFullscreen()\r\n    },\r\n    exitFullscreen () {\r\n      if (document.exitFullscreen) document.exitFullscreen()\r\n      else if (document.mozCancelFullScreen) document.mozCancelFullScreen()\r\n      else if (document.webkitExitFullscreen) document.webkitExitFullscreen()\r\n      else if (document.msExitFullscreen) document.msExitFullscreen()\r\n    },\r\n    getRandomImage () {\r\n      const lastIndex = localStorage.getItem('wallpaperIndex')\r\n      let randomIndex\r\n      do {\r\n        randomIndex = this.wallpapers.indexOf(sample(this.wallpapers))\r\n      } while (lastIndex === randomIndex)\r\n      localStorage.setItem('wallpaperIndex', randomIndex)\r\n      return this.wallpapers[randomIndex]\r\n    },\r\n    preloadImages () {\r\n      this.wallpapers.forEach(url => {\r\n        const img = new Image()\r\n        img.src = url\r\n        img.onload = () => {\r\n          console.log(`${url}È¢ÑÂä†ËΩΩÂÆåÊàê`)\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n@import '@/assets/LayoutIndex.css';\r\n</style>\r\n"],"mappings":";;AAmCA,SAAAA,MAAA;AACA,OAAAC,UAAA;AACA,OAAAC,MAAA;AACA,OAAAC,QAAA;AACA,SAAAC,OAAA;AACA,OAAAC,MAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IACAN,UAAA;IACAC,MAAA;IACAC,QAAA;IACAE;EACA;EACAG,KAAA;IACA;MACAC,cAAA;MACAC,UAAA;MACAC,MAAA;MACAC,gBAAA;MACAC,QAAA,EAAAC,OAAA,CAAAC,GAAA,CAAAC,kBAAA;MACAC,UAAA,GACA,GAAAH,OAAA,CAAAC,GAAA,CAAAG,sBAAA,sBACA,GAAAJ,OAAA,CAAAC,GAAA,CAAAG,sBAAA;IAEA;EACA;EACAC,QAAA;IACAC,WAAA;MACA,YAAAC,MAAA,CAAAC,IAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAX,gBAAA,QAAAY,cAAA;IACA,KAAAC,aAAA;IACAC,MAAA,CAAAC,gBAAA,gBAAAC,YAAA;IACAxB,OAAA,CAAAO,MAAA;MACA,KAAAA,MAAA,GAAAA,MAAA;IACA;EACA;EACAkB,cAAA;IACAH,MAAA,CAAAI,mBAAA,gBAAAF,YAAA;EACA;EACAG,OAAA;IACAH,aAAA;MACA,KAAAlB,UAAA,GAAAgB,MAAA,CAAAM,OAAA;IACA;IACAC,UAAA;MACA,KAAAxB,cAAA;MACA,KAAAyB,iBAAA,MAAAC,KAAA,CAAAC,KAAA;IACA;IACAC,WAAA;MACA,KAAA5B,cAAA;MACA,KAAA6B,cAAA;IACA;IACAJ,kBAAAK,OAAA;MACA,IAAAA,OAAA,CAAAL,iBAAA,EAAAK,OAAA,CAAAL,iBAAA,QACA,IAAAK,OAAA,CAAAC,oBAAA,EAAAD,OAAA,CAAAC,oBAAA,QACA,IAAAD,OAAA,CAAAE,uBAAA,EAAAF,OAAA,CAAAE,uBAAA,QACA,IAAAF,OAAA,CAAAG,mBAAA,EAAAH,OAAA,CAAAG,mBAAA;IACA;IACAJ,eAAA;MACA,IAAAK,QAAA,CAAAL,cAAA,EAAAK,QAAA,CAAAL,cAAA,QACA,IAAAK,QAAA,CAAAC,mBAAA,EAAAD,QAAA,CAAAC,mBAAA,QACA,IAAAD,QAAA,CAAAE,oBAAA,EAAAF,QAAA,CAAAE,oBAAA,QACA,IAAAF,QAAA,CAAAG,gBAAA,EAAAH,QAAA,CAAAG,gBAAA;IACA;IACAtB,eAAA;MACA,MAAAuB,SAAA,GAAAC,YAAA,CAAAC,OAAA;MACA,IAAAC,WAAA;MACA;QACAA,WAAA,QAAAjC,UAAA,CAAAkC,OAAA,CAAAnD,MAAA,MAAAiB,UAAA;MACA,SAAA8B,SAAA,KAAAG,WAAA;MACAF,YAAA,CAAAI,OAAA,mBAAAF,WAAA;MACA,YAAAjC,UAAA,CAAAiC,WAAA;IACA;IACAzB,cAAA;MACA,KAAAR,UAAA,CAAAoC,OAAA,CAAAC,GAAA;QACA,MAAAC,GAAA,OAAAC,KAAA;QACAD,GAAA,CAAAE,GAAA,GAAAH,GAAA;QACAC,GAAA,CAAAG,MAAA;UACAC,OAAA,CAAAC,GAAA,IAAAN,GAAA;QACA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}