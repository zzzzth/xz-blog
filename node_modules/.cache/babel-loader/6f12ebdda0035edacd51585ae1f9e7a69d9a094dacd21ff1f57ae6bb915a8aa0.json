{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport $, { error } from 'jquery';\nimport { loginApi } from '@/api/login';\nimport { registerApi, validUsername, vaildEmail } from '@/api/register';\nimport { Message } from 'element-ui';\nexport default {\n  name: 'LoginIndex',\n  data() {\n    return {\n      username: '',\n      loginPassword: '',\n      registerPassword: '',\n      confirmPassword: '',\n      flag: true,\n      userId: '',\n      loginEmail: '',\n      registerEmail: ''\n    };\n  },\n  methods: {\n    async login() {\n      if (!this.loginEmail || !this.loginPassword) {\n        console.log('输入不能为空');\n        return Message.warning('输入不能为空');\n      }\n      try {\n        const response = await loginApi(this.loginEmailemail, this.loginPassword);\n        // console.log(response)\n        const {\n          email,\n          password,\n          id\n        } = response;\n        if (email === this.loginEmail && password === this.loginPassword && email !== password) {\n          this.userId = id;\n          Message.success('登录成功');\n          console.log('邮箱:', email, '密码:', password, '用户id:', id);\n          this.$router.push('/');\n        } else {\n          Message.error('账号或密码错误');\n        }\n      } catch {\n        Message.error('账号或密码错误');\n        console.log('失败', error);\n      }\n    },\n    async register() {\n      // 校验必填项\n      if (!this.username || !this.registerPassword || !this.registerEmail || !this.confirmPassword) {\n        console.log('输入不能为空');\n        return Message.warning('所有字段必须填写');\n      }\n\n      // 校验密码一致性\n      if (this.registerPassword !== this.confirmPassword) {\n        return Message.error('两次密码不一致');\n      }\n\n      // 校验用户名唯一性\n      const usernameCheck = await validUsername(this.username);\n      if (usernameCheck !== true) {\n        return Message.error(usernameCheck); // 提示用户名已存在\n      }\n      // 验证邮箱可用行\n      const emailCheck = await vaildEmail(this.registerEmail);\n      if (emailCheck !== true) {\n        return Message.error(emailCheck);\n      }\n      try {\n        // 调用注册 API，传递正确的字段名\n        const response = await registerApi(this.username, this.registerPassword, this.registerEmail);\n        console.log('注册成功，返回的数据:', response);\n\n        // 如果返回的数据正确，进行后续处理\n        const {\n          username,\n          password,\n          email,\n          id\n        } = response;\n        if (username === this.username && password === this.registerPassword && email === this.registerEmail) {\n          Message.success('注册成功');\n          console.log('用户名:', username, '密码:', password, 'email:', email, 'id:', id);\n          this.toggle(); // 假设 toggle 是你用来切换界面的函数\n        }\n      } catch (error) {\n        // 捕获并打印错误\n        Message.error('注册失败');\n        console.log('失败', error);\n      }\n    },\n    toggle() {\n      const img = this.$refs.image;\n      if (this.flag) {\n        $('.pre-box').css('transform', 'translateX(100%)');\n        $('.pre-box').css('background-color', '#c9e0ed');\n        img.src = require('@/assets/佐助.webp');\n      } else {\n        $('.pre-box').css('transform', 'translateX(0%)');\n        $('.pre-box').css('background-color', '#edd4dc');\n        img.src = require('@/assets/鸣人.webp');\n      }\n      this.flag = !this.flag;\n    }\n  }\n};","map":{"version":3,"names":["$","error","loginApi","registerApi","validUsername","vaildEmail","Message","name","data","username","loginPassword","registerPassword","confirmPassword","flag","userId","loginEmail","registerEmail","methods","login","console","log","warning","response","loginEmailemail","email","password","id","success","$router","push","register","usernameCheck","emailCheck","toggle","img","$refs","image","css","src","require"],"sources":["src/views/login/index.vue"],"sourcesContent":["<template>\r\n  <div class=\"login-page\">\r\n    <div class=\"box\">\r\n      <div class=\"pre-box\">\r\n        <h1>WELCOME TO AHAO BLOG!</h1>\r\n        <p>JOIN US!</p>\r\n        <div class=\"img-box\">\r\n          <img ref=\"image\" src=\"@/assets/鸣人.webp\" alt=\"\">\r\n        </div>\r\n      </div>\r\n      <div class=\"register-form\">\r\n        <div class=\"title-box\">\r\n          <h1>注册</h1>\r\n        </div>\r\n        <div class=\"input-box\">\r\n          <input v-model=\"username\" type=\"text\" placeholder=\"用户名\" autocomplete=\"off\" name=\"custom-username\" id=\"custom-username\">\r\n          <input v-model=\"registerEmail\" type=\"email\" placeholder=\"邮箱\" autocomplete=\"off\" name=\"custom-email\" id=\"custom-email\">\r\n          <input v-model=\"registerPassword\" type=\"password\" placeholder=\"密码\" autocomplete=\"off\" name=\"custom-password\" id=\"custom-password\">\r\n          <input v-model=\"confirmPassword\" type=\"password\" placeholder=\"确认密码\" autocomplete=\"off\" name=\"custom-confirm-password\" id=\"custom-confirm-password\">\r\n\r\n        </div>\r\n        <div class=\"btn-box\">\r\n          <button @click=\"register\" >注册</button>\r\n          <p @click=\"toggle\">已有用户？去登陆</p>\r\n        </div>\r\n      </div>\r\n      <div class=\"login-form\">\r\n        <div class=\"title-box\">\r\n          <h1>登录</h1>\r\n        </div>\r\n        <div class=\"input-box\">\r\n          <input v-model=\"loginEmail\" type=\"text\" placeholder=\"邮箱\" autocomplete=\"off\">\r\n          <input v-model=\"loginPassword\" type=\"password\" placeholder=\"密码\" autocomplete=\"off\">\r\n        </div>\r\n        <div class=\"btn-box\">\r\n          <button @click=\"login\">登录</button>\r\n          <p @click=\"toggle\">没有用户？去注册</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport $, { error } from 'jquery'\r\nimport { loginApi } from '@/api/login'\r\nimport { registerApi, validUsername, vaildEmail } from '@/api/register'\r\nimport { Message } from 'element-ui'\r\n\r\nexport default {\r\n  name: 'LoginIndex',\r\n  data () {\r\n    return {\r\n      username: '',\r\n      loginPassword: '',\r\n      registerPassword: '',\r\n      confirmPassword: '',\r\n      flag: true,\r\n      userId: '',\r\n      loginEmail: '',\r\n      registerEmail: ''\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    async login () {\r\n      if (!this.loginEmail || !this.loginPassword) {\r\n        console.log('输入不能为空')\r\n        return Message.warning('输入不能为空')\r\n      }\r\n      try {\r\n        const response = await loginApi(this.loginEmailemail, this.loginPassword)\r\n        // console.log(response)\r\n        const { email, password, id } = response\r\n        if (email === this.loginEmail && password === this.loginPassword && email !== password) {\r\n          this.userId = id\r\n          Message.success('登录成功')\r\n          console.log('邮箱:', email, '密码:', password, '用户id:', id)\r\n          this.$router.push('/')\r\n        } else {\r\n          Message.error('账号或密码错误')\r\n        }\r\n      } catch {\r\n        Message.error('账号或密码错误')\r\n        console.log('失败', error)\r\n      }\r\n    },\r\n\r\n    async register () {\r\n      // 校验必填项\r\n      if (!this.username || !this.registerPassword || !this.registerEmail || !this.confirmPassword) {\r\n        console.log('输入不能为空')\r\n        return Message.warning('所有字段必须填写')\r\n      }\r\n\r\n      // 校验密码一致性\r\n      if (this.registerPassword !== this.confirmPassword) {\r\n        return Message.error('两次密码不一致')\r\n      }\r\n\r\n      // 校验用户名唯一性\r\n      const usernameCheck = await validUsername(this.username)\r\n      if (usernameCheck !== true) {\r\n        return Message.error(usernameCheck) // 提示用户名已存在\r\n      }\r\n      // 验证邮箱可用行\r\n      const emailCheck = await vaildEmail(this.registerEmail)\r\n      if (emailCheck !== true) {\r\n        return Message.error(emailCheck)\r\n      }\r\n      try {\r\n        // 调用注册 API，传递正确的字段名\r\n        const response = await registerApi(this.username, this.registerPassword, this.registerEmail)\r\n        console.log('注册成功，返回的数据:', response)\r\n\r\n        // 如果返回的数据正确，进行后续处理\r\n        const { username, password, email, id } = response\r\n        if (username === this.username && password === this.registerPassword && email === this.registerEmail) {\r\n          Message.success('注册成功')\r\n          console.log('用户名:', username, '密码:', password, 'email:', email, 'id:', id)\r\n          this.toggle() // 假设 toggle 是你用来切换界面的函数\r\n        }\r\n      } catch (error) {\r\n        // 捕获并打印错误\r\n        Message.error('注册失败')\r\n        console.log('失败', error)\r\n      }\r\n    },\r\n\r\n    toggle () {\r\n      const img = this.$refs.image\r\n      if (this.flag) {\r\n        $('.pre-box').css('transform', 'translateX(100%)')\r\n        $('.pre-box').css('background-color', '#c9e0ed')\r\n        img.src = require('@/assets/佐助.webp')\r\n      } else {\r\n        $('.pre-box').css('transform', 'translateX(0%)')\r\n        $('.pre-box').css('background-color', '#edd4dc')\r\n        img.src = require('@/assets/鸣人.webp')\r\n      }\r\n      this.flag = !this.flag\r\n    }\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<style scoped>\r\n* {\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n}\r\ninput {\r\n  outline: none;\r\n}\r\nhtml,\r\nbody {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n.login-page {\r\n  display: flex;\r\n  height: 100vh;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background: linear-gradient(to right,rgb(247,209,215),rgb(191,227,241));\r\n}\r\n.box {\r\n  display: flex;\r\n  position: relative;\r\n  width: 1050px;\r\n  height: 600px;\r\n  margin:auto;\r\n  /* background-color: #fff; */\r\n  border-radius: 8px;\r\n  border: 1px solid rgba(255,255,255,0);\r\n  box-shadow: 5px 4px 3px rgba(0,0,0,.1);\r\n\r\n}\r\n.pre-box {\r\n  width: calc(1050px / 2);\r\n  height: 100%;\r\n  left: 0;\r\n  top: 0;\r\n  position: absolute;\r\n  border-radius: 4px;\r\n  box-shadow: 5px 4px 3px rgba(0,0,0,.1);\r\n  background-color: rgb(247,209,215);\r\n  transition: 1.2s;\r\n}\r\n.pre-box h1 {\r\n  margin-top: 150px;\r\n  font-size: 30px;\r\n  text-align: center;\r\n  text-shadow: 5px 4px 3px rgba(0,0,0,.1);\r\n  letter-spacing: 2px;\r\n}\r\n.pre-box p {\r\n  text-align: center;\r\n  text-shadow: 5px 4px 3px rgba(0,0,0,.1);\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n\r\n}\r\n\r\n.img-box  {\r\n  width: 200px;\r\n  height: 200px;\r\n  border-radius:50% ;\r\n  overflow: hidden;\r\n  margin: 20px auto;\r\n}\r\n.img-box img {\r\n  width: 100%;\r\n\r\n}\r\n.register-form,\r\n.login-form {\r\n  flex:1;\r\n  height: 100%;\r\n}\r\n.title-box {\r\n  height: 300px;\r\n  line-height: 500px;\r\n}\r\n.title-box h1 {\r\n  text-align: center;\r\n  letter-spacing: 5px;\r\n  text-shadow: 5px 4px 3px rgba(0,0,0,.1);\r\n}\r\n.input-box {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\ninput {\r\n  border: 1px solid gray;\r\n  border-radius: 4px;\r\n  width: 60%;\r\n  height: 40px;\r\n  margin-bottom: 10px;\r\n  text-indent: 5px;\r\n}\r\ninput:focus {\r\n  border: 2px solid #3498db; /* 当输入框获得焦点时，边框颜色变为蓝色 */\r\n  background-color: #f0f8ff; /* 输入框的背景颜色变为淡蓝色 */\r\n  outline: none; /* 去掉浏览器默认的焦点外边框 */\r\n}\r\ninput:focus::placeholder {\r\n  opacity: 0;\r\n}\r\n.btn-box {\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\nbutton {\r\n  border: none;\r\n  border-radius: 4px;\r\n  width: 100px;\r\n  height: 30px;\r\n  color:white;\r\n  line-height: 30px;\r\n  background-color: #3498db;\r\n  border: 1px solid rgb(10, 152, 217);\r\n  margin-right: 5px;\r\n}\r\nbutton:hover {\r\n  cursor: pointer;\r\n  opacity: 0.8;\r\n\r\n}\r\n.btn-box p {\r\n  height: 30px;\r\n  line-height: 30px;\r\n}\r\n.btn-box p:hover {\r\n  cursor: pointer;\r\n  color: white;\r\n}\r\n</style>\r\n"],"mappings":";AA4CA,OAAAA,CAAA,IAAAC,KAAA;AACA,SAAAC,QAAA;AACA,SAAAC,WAAA,EAAAC,aAAA,EAAAC,UAAA;AACA,SAAAC,OAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,QAAA;MACAC,aAAA;MACAC,gBAAA;MACAC,eAAA;MACAC,IAAA;MACAC,MAAA;MACAC,UAAA;MACAC,aAAA;IACA;EACA;EAEAC,OAAA;IACA,MAAAC,MAAA;MACA,UAAAH,UAAA,UAAAL,aAAA;QACAS,OAAA,CAAAC,GAAA;QACA,OAAAd,OAAA,CAAAe,OAAA;MACA;MACA;QACA,MAAAC,QAAA,SAAApB,QAAA,MAAAqB,eAAA,OAAAb,aAAA;QACA;QACA;UAAAc,KAAA;UAAAC,QAAA;UAAAC;QAAA,IAAAJ,QAAA;QACA,IAAAE,KAAA,UAAAT,UAAA,IAAAU,QAAA,UAAAf,aAAA,IAAAc,KAAA,KAAAC,QAAA;UACA,KAAAX,MAAA,GAAAY,EAAA;UACApB,OAAA,CAAAqB,OAAA;UACAR,OAAA,CAAAC,GAAA,QAAAI,KAAA,SAAAC,QAAA,WAAAC,EAAA;UACA,KAAAE,OAAA,CAAAC,IAAA;QACA;UACAvB,OAAA,CAAAL,KAAA;QACA;MACA;QACAK,OAAA,CAAAL,KAAA;QACAkB,OAAA,CAAAC,GAAA,OAAAnB,KAAA;MACA;IACA;IAEA,MAAA6B,SAAA;MACA;MACA,UAAArB,QAAA,UAAAE,gBAAA,UAAAK,aAAA,UAAAJ,eAAA;QACAO,OAAA,CAAAC,GAAA;QACA,OAAAd,OAAA,CAAAe,OAAA;MACA;;MAEA;MACA,SAAAV,gBAAA,UAAAC,eAAA;QACA,OAAAN,OAAA,CAAAL,KAAA;MACA;;MAEA;MACA,MAAA8B,aAAA,SAAA3B,aAAA,MAAAK,QAAA;MACA,IAAAsB,aAAA;QACA,OAAAzB,OAAA,CAAAL,KAAA,CAAA8B,aAAA;MACA;MACA;MACA,MAAAC,UAAA,SAAA3B,UAAA,MAAAW,aAAA;MACA,IAAAgB,UAAA;QACA,OAAA1B,OAAA,CAAAL,KAAA,CAAA+B,UAAA;MACA;MACA;QACA;QACA,MAAAV,QAAA,SAAAnB,WAAA,MAAAM,QAAA,OAAAE,gBAAA,OAAAK,aAAA;QACAG,OAAA,CAAAC,GAAA,gBAAAE,QAAA;;QAEA;QACA;UAAAb,QAAA;UAAAgB,QAAA;UAAAD,KAAA;UAAAE;QAAA,IAAAJ,QAAA;QACA,IAAAb,QAAA,UAAAA,QAAA,IAAAgB,QAAA,UAAAd,gBAAA,IAAAa,KAAA,UAAAR,aAAA;UACAV,OAAA,CAAAqB,OAAA;UACAR,OAAA,CAAAC,GAAA,SAAAX,QAAA,SAAAgB,QAAA,YAAAD,KAAA,SAAAE,EAAA;UACA,KAAAO,MAAA;QACA;MACA,SAAAhC,KAAA;QACA;QACAK,OAAA,CAAAL,KAAA;QACAkB,OAAA,CAAAC,GAAA,OAAAnB,KAAA;MACA;IACA;IAEAgC,OAAA;MACA,MAAAC,GAAA,QAAAC,KAAA,CAAAC,KAAA;MACA,SAAAvB,IAAA;QACAb,CAAA,aAAAqC,GAAA;QACArC,CAAA,aAAAqC,GAAA;QACAH,GAAA,CAAAI,GAAA,GAAAC,OAAA;MACA;QACAvC,CAAA,aAAAqC,GAAA;QACArC,CAAA,aAAAqC,GAAA;QACAH,GAAA,CAAAI,GAAA,GAAAC,OAAA;MACA;MACA,KAAA1B,IAAA,SAAAA,IAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}