{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'Barrage',\n  data() {\n    return {\n      barrageList: [],\n      // 存储正在显示的弹幕\n      socket: null // WebSocket 连接\n    };\n  },\n  created() {\n    this.initWebSocket();\n  },\n  methods: {\n    initWebSocket() {\n      this.socket = new WebSocket('ws://localhost:8080');\n      this.socket.onopen = () => {\n        console.log('连接 WebSocket 服务器成功');\n      };\n      this.socket.onmessage = event => {\n        const text = event.data;\n        this.addBarrage(text);\n      };\n      this.socket.onerror = error => {\n        console.error('WebSocket 错误:', error);\n      };\n      this.socket.onclose = () => {\n        console.log('WebSocket 连接已关闭');\n      };\n    },\n    addBarrage(text) {\n      const top = Math.random() * 80 + 'vh';\n      const color = this.getRandomColor();\n      const duration = Math.random() * 3 + 4 + 's';\n      const newBarrage = {\n        text,\n        style: {\n          top,\n          color,\n          animationDuration: duration\n        }\n      };\n      this.barrageList.push(newBarrage);\n\n      // 5秒后移除弹幕\n      setTimeout(() => {\n        this.barrageList.shift();\n      }, parseFloat(duration) * 1000);\n    },\n    getRandomColor() {\n      const colors = ['#ff4d4f', '#40a9ff', '#fadb14', '#52c41a', '#eb2f96'];\n      return colors[Math.floor(Math.random() * colors.length)];\n    }\n  }\n};","map":{"version":3,"names":["name","data","barrageList","socket","created","initWebSocket","methods","WebSocket","onopen","console","log","onmessage","event","text","addBarrage","onerror","error","onclose","top","Math","random","color","getRandomColor","duration","newBarrage","style","animationDuration","push","setTimeout","shift","parseFloat","colors","floor","length"],"sources":["src/components/Barrage.vue"],"sourcesContent":["<template>\r\n    <div class=\"barrage-container\">\r\n      <div\r\n        v-for=\"(item, index) in barrageList\"\r\n        :key=\"index\"\r\n        class=\"barrage-item\"\r\n        :style=\"item.style\"\r\n      >\r\n        {{ item.text }}\r\n      </div>\r\n    </div>\r\n  </template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'Barrage',\r\n  data () {\r\n    return {\r\n      barrageList: [], // 存储正在显示的弹幕\r\n      socket: null // WebSocket 连接\r\n    }\r\n  },\r\n  created () {\r\n    this.initWebSocket()\r\n  },\r\n  methods: {\r\n    initWebSocket () {\r\n      this.socket = new WebSocket('ws://localhost:8080')\r\n\r\n      this.socket.onopen = () => {\r\n        console.log('连接 WebSocket 服务器成功')\r\n      }\r\n\r\n      this.socket.onmessage = (event) => {\r\n        const text = event.data\r\n        this.addBarrage(text)\r\n      }\r\n\r\n      this.socket.onerror = (error) => {\r\n        console.error('WebSocket 错误:', error)\r\n      }\r\n\r\n      this.socket.onclose = () => {\r\n        console.log('WebSocket 连接已关闭')\r\n      }\r\n    },\r\n    addBarrage (text) {\r\n      const top = Math.random() * 80 + 'vh'\r\n      const color = this.getRandomColor()\r\n      const duration = Math.random() * 3 + 4 + 's'\r\n\r\n      const newBarrage = {\r\n        text,\r\n        style: {\r\n          top,\r\n          color,\r\n          animationDuration: duration\r\n        }\r\n      }\r\n\r\n      this.barrageList.push(newBarrage)\r\n\r\n      // 5秒后移除弹幕\r\n      setTimeout(() => {\r\n        this.barrageList.shift()\r\n      }, parseFloat(duration) * 1000)\r\n    },\r\n    getRandomColor () {\r\n      const colors = ['#ff4d4f', '#40a9ff', '#fadb14', '#52c41a', '#eb2f96']\r\n      return colors[Math.floor(Math.random() * colors.length)]\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n  <style scoped>\r\n  .barrage-container {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    pointer-events: none;\r\n    overflow: hidden;\r\n    z-index: 1000;\r\n  }\r\n\r\n  .barrage-item {\r\n    position: absolute;\r\n    white-space: nowrap;\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n    animation: moveBarrage linear infinite;\r\n  }\r\n\r\n  @keyframes moveBarrage {\r\n    from {\r\n      transform: translateX(100vw);\r\n    }\r\n    to {\r\n      transform: translateX(-100%);\r\n    }\r\n  }\r\n  </style>\r\n"],"mappings":";AAcA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,WAAA;MAAA;MACAC,MAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,aAAA;EACA;EACAC,OAAA;IACAD,cAAA;MACA,KAAAF,MAAA,OAAAI,SAAA;MAEA,KAAAJ,MAAA,CAAAK,MAAA;QACAC,OAAA,CAAAC,GAAA;MACA;MAEA,KAAAP,MAAA,CAAAQ,SAAA,GAAAC,KAAA;QACA,MAAAC,IAAA,GAAAD,KAAA,CAAAX,IAAA;QACA,KAAAa,UAAA,CAAAD,IAAA;MACA;MAEA,KAAAV,MAAA,CAAAY,OAAA,GAAAC,KAAA;QACAP,OAAA,CAAAO,KAAA,kBAAAA,KAAA;MACA;MAEA,KAAAb,MAAA,CAAAc,OAAA;QACAR,OAAA,CAAAC,GAAA;MACA;IACA;IACAI,WAAAD,IAAA;MACA,MAAAK,GAAA,GAAAC,IAAA,CAAAC,MAAA;MACA,MAAAC,KAAA,QAAAC,cAAA;MACA,MAAAC,QAAA,GAAAJ,IAAA,CAAAC,MAAA;MAEA,MAAAI,UAAA;QACAX,IAAA;QACAY,KAAA;UACAP,GAAA;UACAG,KAAA;UACAK,iBAAA,EAAAH;QACA;MACA;MAEA,KAAArB,WAAA,CAAAyB,IAAA,CAAAH,UAAA;;MAEA;MACAI,UAAA;QACA,KAAA1B,WAAA,CAAA2B,KAAA;MACA,GAAAC,UAAA,CAAAP,QAAA;IACA;IACAD,eAAA;MACA,MAAAS,MAAA;MACA,OAAAA,MAAA,CAAAZ,IAAA,CAAAa,KAAA,CAAAb,IAAA,CAAAC,MAAA,KAAAW,MAAA,CAAAE,MAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}