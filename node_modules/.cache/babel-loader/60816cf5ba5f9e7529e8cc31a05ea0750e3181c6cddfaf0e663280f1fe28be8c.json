{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// import Barrage from '@/components/Barrage.vue'\nimport { mapGetters } from 'vuex';\nimport { Message } from 'element-ui';\nimport Swal from 'sweetalert2';\nimport axios from 'axios';\n// import axios from 'axios'\n// import { loginApi } from '@/api/login'\nexport default {\n  name: 'remarkIndex',\n  data() {\n    return {\n      content: '',\n      isSubmitting: false,\n      isShowButton: false,\n      messages: [],\n      user: null\n    };\n  },\n  components: {\n    // Barrage\n  },\n  methods: {\n    async submitbarrage() {\n      try {\n        if (!this.islogin) {\n          Swal.fire({\n            title: '哎呀~',\n            text: '你还没登录呢，笨蛋~ 🥺',\n            icon: 'warning',\n            confirmButtonText: '马上去登录 💖',\n            background: '#fff0f6',\n            // 可爱粉色\n            customClass: {\n              popup: 'cute-popup'\n            },\n            preConfirm: () => {\n              this.$router.push({\n                path: '/login'\n              }); // 跳转到登录页面\n            }\n          });\n          return;\n        }\n        if (!this.content.trim()) {\n          return Message.warning('没东西还发🤨');\n        }\n        if (this.isSubmitting) return;\n        this.isSubmitting = true;\n        const newMessage = {\n          username: this.user.username,\n          text: this.content,\n          createdAt: new Date(new Date().getTime() + 8 * 60 * 60 * 1000).toISOString()\n        };\n        const response = await axios.post('http://localhost:3000/messages', newMessage);\n        this.messages.unshift(response.data);\n        this.content = '';\n        setTimeout(() => {\n          this.isSubmitting = false;\n        }, 1000);\n      } catch (error) {\n        console.error('提交留言失败', error);\n        Message.error('提交失败，请重试');\n      }\n    },\n    async fetchMessages() {\n      try {\n        const response = await axios.get('http://localhost:3000/messages?_sort=createdAt&_order=desc');\n        this.messages = response.data;\n      } catch (error) {\n        console.error('获取留言失败', error);\n      }\n    }\n  },\n  async created() {\n    await this.fetchMessages();\n    this.user = JSON.parse(localStorage.getItem('userinfo'));\n  },\n  async mounted() {\n    const response = await axios.get('http://localhost:3000/messages');\n    this.messages = response.data.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n  },\n  computed: {\n    ...mapGetters('user', ['getUserInfo']),\n    islogin() {\n      console.log('Vuex 里的 getUserInfo:', this.getUserInfo);\n      return !!(this.getUserInfo && this.getUserInfo.userId);\n    }\n  },\n  methods: {\n    showButton: _.debounce(function () {\n      this.isShowButton = true;\n    }, 300)\n  }\n};","map":{"version":3,"names":["mapGetters","Message","Swal","axios","name","data","content","isSubmitting","isShowButton","messages","user","components","methods","submitbarrage","islogin","fire","title","text","icon","confirmButtonText","background","customClass","popup","preConfirm","$router","push","path","trim","warning","newMessage","username","createdAt","Date","getTime","toISOString","response","post","unshift","setTimeout","error","console","fetchMessages","get","created","JSON","parse","localStorage","getItem","mounted","sort","a","b","computed","log","getUserInfo","userId","showButton","_","debounce"],"sources":["src/views/remark/index.vue"],"sourcesContent":["<template>\r\n  <div class=\"remark\">\r\n    <div class=\"header\">\r\n      <h1>心愿墙</h1>\r\n      <input type=\"text\" placeholder=\"留下点什么啦~\" class=\"dreamBoard\" @click=\"showButton\" v-model=\"content\">\r\n      <button class=\"pushRemark\" v-if=\"isShowButton\" @click=\"submitbarrage\" :disabled=\"isSubmitting\">{{ isSubmitting ? '发射中...' : '发射' }}</button>\r\n    </div>\r\n    <!-- 留言板部分 -->\r\n    <div class=\"messages-list\">\r\n      <div class=\"messages-item\" v-for=\"message in messages\" :key=\"message.id\">\r\n        <div class=\"message-header\">\r\n          <span class=\"username\">{{ message.username }}</span>\r\n          <span class=\"timestamp\">发布时间:{{ message.createdAt }}</span>\r\n        </div>\r\n        <div class=\"message-text\">{{ message.text }}</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// import Barrage from '@/components/Barrage.vue'\r\nimport { mapGetters } from 'vuex'\r\nimport { Message } from 'element-ui'\r\nimport Swal from 'sweetalert2'\r\nimport axios from 'axios'\r\n// import axios from 'axios'\r\n// import { loginApi } from '@/api/login'\r\nexport default {\r\n  name: 'remarkIndex',\r\n  data () {\r\n    return {\r\n      content: '',\r\n      isSubmitting: false,\r\n      isShowButton: false,\r\n      messages: [],\r\n      user: null\r\n\r\n    }\r\n  },\r\n  components: {\r\n    // Barrage\r\n  },\r\n  methods: {\r\n    async submitbarrage () {\r\n      try {\r\n        if (!this.islogin) {\r\n          Swal.fire({\r\n            title: '哎呀~',\r\n            text: '你还没登录呢，笨蛋~ 🥺',\r\n            icon: 'warning',\r\n            confirmButtonText: '马上去登录 💖',\r\n            background: '#fff0f6', // 可爱粉色\r\n            customClass: {\r\n              popup: 'cute-popup'\r\n            },\r\n            preConfirm: () => {\r\n              this.$router.push({ path: '/login' }) // 跳转到登录页面\r\n            }\r\n          })\r\n          return\r\n        }\r\n        if (!this.content.trim()) {\r\n          return Message.warning('没东西还发🤨')\r\n        }\r\n        if (this.isSubmitting) return\r\n        this.isSubmitting = true\r\n\r\n        const newMessage = {\r\n          username: this.user.username,\r\n          text: this.content,\r\n          createdAt: new Date(new Date().getTime() + 8 * 60 * 60 * 1000).toISOString()\r\n        }\r\n\r\n        const response = await axios.post('http://localhost:3000/messages', newMessage)\r\n        this.messages.unshift(response.data)\r\n\r\n        this.content = ''\r\n        setTimeout(() => {\r\n          this.isSubmitting = false\r\n        }, 1000)\r\n      } catch (error) {\r\n        console.error('提交留言失败', error)\r\n        Message.error('提交失败，请重试')\r\n      }\r\n    },\r\n    async fetchMessages () {\r\n      try {\r\n        const response = await axios.get('http://localhost:3000/messages?_sort=createdAt&_order=desc')\r\n        this.messages = response.data\r\n      } catch (error) {\r\n        console.error('获取留言失败', error)\r\n      }\r\n    }\r\n  },\r\n  async created () {\r\n    await this.fetchMessages()\r\n    this.user = JSON.parse(localStorage.getItem('userinfo'))\r\n  },\r\n  async mounted () {\r\n    const response = await axios.get('http://localhost:3000/messages')\r\n    this.messages = response.data.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))\r\n  },\r\n  computed: {\r\n    ...mapGetters('user', ['getUserInfo']),\r\n    islogin () {\r\n      console.log('Vuex 里的 getUserInfo:', this.getUserInfo)\r\n      return !!(this.getUserInfo && this.getUserInfo.userId)\r\n    }\r\n  },\r\n  methods: {\r\n    showButton: _.debounce(function () {\r\n      this.isShowButton = true\r\n    }, 300)\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/* 确保 remark 部分的样式不受全局布局影响 */\r\n.remark {\r\n  position: relative; /* 使其脱离常规流 */\r\n  z-index: 10; /* 保证它在其他内容上方 */\r\n  padding: 20px;\r\n  width: 100%;\r\n  max-width: 1000px; /* 限制最大宽度 */\r\n  margin: 20px auto; /* 居中显示 */\r\n  background: transparent;\r\n  border-radius: 16px;\r\n}\r\n.remark .header {\r\n  text-align: center;\r\n}\r\n.remark h1 {\r\n  font-family: Arial, Helvetica, sans-serif;\r\n  text-align: center;\r\n  color: white;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.remark .dreamBoard {\r\n  width: 200px;\r\n  height: 30px;\r\n  border-radius: 15px;\r\n  box-shadow: 10px white;\r\n  background-color: transparent;\r\n  color: white;\r\n  /* border: 1px solid #f48fb1; */\r\n  padding: 0 10px;\r\n  font-size: 14px;\r\n}\r\n\r\n.dreamBoard::placeholder {\r\n  text-indent: 10px;\r\n  color: white;\r\n  opacity: 0.8;\r\n}\r\n\r\n.pushRemark {\r\n  width: 80px;\r\n  height: 30px;\r\n  color: white;\r\n  border-radius: 15px;\r\n  cursor: pointer;\r\n  background-color: transparent;\r\n  margin-left: 5px;\r\n  border: 1px solid #f48fb1;\r\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n  transition: transform 0.3s ease, background-color 0.3s ease;\r\n  display: inline-block;\r\n}\r\n\r\n.pushRemark:hover {\r\n  background-color: #f48fb1;\r\n}\r\n\r\n.pushRemark:active {\r\n  transform: scale(0.95);\r\n}\r\n\r\n.messages-list {\r\n  margin-top: 20px;\r\n  padding: 20px;\r\n  max-width: 1000px; /* 宽度最大为1000px */\r\n  width: 100%;\r\n  margin: 0 auto; /* 居中对齐 */\r\n  background: linear-gradient(135deg, #f9e3ea, #fad0dc); /* 轻柔渐变色 */\r\n  border-radius: 16px;\r\n  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.08); /* 轻微阴影 */\r\n  border: 1px solid #f48fb1;\r\n  overflow-y: auto; /* 防止内容溢出 */\r\n  max-height: 400px; /* 限制最大高度，防止过长 */\r\n}\r\n\r\n.messages-item {\r\n  font-size: 16px;\r\n  color: #4a4a4a;\r\n  background: #fff5f8; /* 消息背景色 */\r\n  padding: 16px;\r\n  border-radius: 10px;\r\n  transition: all 0.3s ease-in-out;\r\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.messages-item:hover {\r\n  transform: translateY(-5px);\r\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.12);\r\n}\r\n\r\n.message-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  font-weight: bold;\r\n  color: #ff4081; /* 粉色字体 */\r\n}\r\n\r\n.username {\r\n  font-size: 18px;\r\n  color: #333;\r\n}\r\n\r\n.timestamp {\r\n  font-size: 12px;\r\n  color: #999;\r\n}\r\n\r\n.message-text {\r\n  font-size: 14px;\r\n  color: #333;\r\n  line-height: 1.5;\r\n}\r\n</style>\r\n"],"mappings":";AAqBA;AACA,SAAAA,UAAA;AACA,SAAAC,OAAA;AACA,OAAAC,IAAA;AACA,OAAAC,KAAA;AACA;AACA;AACA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,OAAA;MACAC,YAAA;MACAC,YAAA;MACAC,QAAA;MACAC,IAAA;IAEA;EACA;EACAC,UAAA;IACA;EAAA,CACA;EACAC,OAAA;IACA,MAAAC,cAAA;MACA;QACA,UAAAC,OAAA;UACAZ,IAAA,CAAAa,IAAA;YACAC,KAAA;YACAC,IAAA;YACAC,IAAA;YACAC,iBAAA;YACAC,UAAA;YAAA;YACAC,WAAA;cACAC,KAAA;YACA;YACAC,UAAA,EAAAA,CAAA;cACA,KAAAC,OAAA,CAAAC,IAAA;gBAAAC,IAAA;cAAA;YACA;UACA;UACA;QACA;QACA,UAAApB,OAAA,CAAAqB,IAAA;UACA,OAAA1B,OAAA,CAAA2B,OAAA;QACA;QACA,SAAArB,YAAA;QACA,KAAAA,YAAA;QAEA,MAAAsB,UAAA;UACAC,QAAA,OAAApB,IAAA,CAAAoB,QAAA;UACAb,IAAA,OAAAX,OAAA;UACAyB,SAAA,MAAAC,IAAA,KAAAA,IAAA,GAAAC,OAAA,yBAAAC,WAAA;QACA;QAEA,MAAAC,QAAA,SAAAhC,KAAA,CAAAiC,IAAA,mCAAAP,UAAA;QACA,KAAApB,QAAA,CAAA4B,OAAA,CAAAF,QAAA,CAAA9B,IAAA;QAEA,KAAAC,OAAA;QACAgC,UAAA;UACA,KAAA/B,YAAA;QACA;MACA,SAAAgC,KAAA;QACAC,OAAA,CAAAD,KAAA,WAAAA,KAAA;QACAtC,OAAA,CAAAsC,KAAA;MACA;IACA;IACA,MAAAE,cAAA;MACA;QACA,MAAAN,QAAA,SAAAhC,KAAA,CAAAuC,GAAA;QACA,KAAAjC,QAAA,GAAA0B,QAAA,CAAA9B,IAAA;MACA,SAAAkC,KAAA;QACAC,OAAA,CAAAD,KAAA,WAAAA,KAAA;MACA;IACA;EACA;EACA,MAAAI,QAAA;IACA,WAAAF,aAAA;IACA,KAAA/B,IAAA,GAAAkC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;EACA;EACA,MAAAC,QAAA;IACA,MAAAb,QAAA,SAAAhC,KAAA,CAAAuC,GAAA;IACA,KAAAjC,QAAA,GAAA0B,QAAA,CAAA9B,IAAA,CAAA4C,IAAA,EAAAC,CAAA,EAAAC,CAAA,SAAAnB,IAAA,CAAAmB,CAAA,CAAApB,SAAA,QAAAC,IAAA,CAAAkB,CAAA,CAAAnB,SAAA;EACA;EACAqB,QAAA;IACA,GAAApD,UAAA;IACAc,QAAA;MACA0B,OAAA,CAAAa,GAAA,8BAAAC,WAAA;MACA,eAAAA,WAAA,SAAAA,WAAA,CAAAC,MAAA;IACA;EACA;EACA3C,OAAA;IACA4C,UAAA,EAAAC,CAAA,CAAAC,QAAA;MACA,KAAAlD,YAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}