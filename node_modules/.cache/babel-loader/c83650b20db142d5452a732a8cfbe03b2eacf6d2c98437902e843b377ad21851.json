{"ast":null,"code":"import loginApi from '@/api/login';\nexport default {\n  namespaced: true,\n  state() {\n    return {\n      // 个人用户相关信息\n      userinfo: {\n        userId: '',\n        username: '',\n        email: ''\n      }\n    };\n  },\n  mutations: {\n    // 设置用户信息\n    setUser(state, user) {\n      state.userinfo = user;\n    },\n    // 清空用户信息\n    cleanUser(state) {\n      state.userinfo = {\n        userId: '',\n        username: '',\n        email: ''\n      };\n    }\n  },\n  actions: {\n    // 登录操作\n    async loginUser({\n      commit\n    }, userCredentials) {\n      try {\n        const res = await loginApi(userCredentials.email, userCredentials.password);\n        if (res && res.userId) {\n          // 登录成功，保存用户信息到 Vuex\n          commit('setUser', {\n            userId: res.userId,\n            username: res.username,\n            email: res.email\n          });\n          // 可选择将用户信息保存到 localStorage，保持登录状态\n          localStorage.setItem('user', JSON.stringify(res));\n        } else {\n          // 如果没有返回用户信息，显示错误\n          console.log('登录失败，返回的数据不正确');\n        }\n      } catch (error) {\n        // 错误处理\n        console.error('登录请求失败:', error);\n      }\n    },\n    // 退出登录操作\n    async logoutUser({\n      commit\n    }) {\n      commit('cleanUser'); // 清空 Vuex 中的用户信息\n      // 退出登录后清空本地存储\n      localStorage.removeItem('user');\n    },\n    // 恢复登录状态（例如刷新页面时）\n    checkUserLogin({\n      commit\n    }) {\n      const user = JSON.parse(localStorage.getItem('user'));\n      if (user) {\n        commit('setUser', user); // 从 localStorage 恢复用户信息\n      }\n    }\n  },\n  getters: {\n    // 获取当前登录的用户信息\n    getUserInfo(state) {\n      return state.userinfo;\n    }\n  }\n};","map":{"version":3,"names":["loginApi","namespaced","state","userinfo","userId","username","email","mutations","setUser","user","cleanUser","actions","loginUser","commit","userCredentials","res","password","localStorage","setItem","JSON","stringify","console","log","error","logoutUser","removeItem","checkUserLogin","parse","getItem","getters","getUserInfo"],"sources":["D:/xz-website/src/store/modules/user.js"],"sourcesContent":["import loginApi from '@/api/login'\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state () {\r\n    return {\r\n      // 个人用户相关信息\r\n      userinfo: {\r\n        userId: '',\r\n        username: '',\r\n        email: ''\r\n      }\r\n    }\r\n  },\r\n  mutations: {\r\n    // 设置用户信息\r\n    setUser (state, user) {\r\n      state.userinfo = user\r\n    },\r\n    // 清空用户信息\r\n    cleanUser (state) {\r\n      state.userinfo = { userId: '', username: '', email: '' }\r\n    }\r\n  },\r\n  actions: {\r\n    // 登录操作\r\n    async loginUser ({ commit }, userCredentials) {\r\n      try {\r\n        const res = await loginApi(userCredentials.email, userCredentials.password)\r\n        if (res && res.userId) {\r\n          // 登录成功，保存用户信息到 Vuex\r\n          commit('setUser', {\r\n            userId: res.userId,\r\n            username: res.username,\r\n            email: res.email\r\n          })\r\n          // 可选择将用户信息保存到 localStorage，保持登录状态\r\n          localStorage.setItem('user', JSON.stringify(res))\r\n        } else {\r\n          // 如果没有返回用户信息，显示错误\r\n          console.log('登录失败，返回的数据不正确')\r\n        }\r\n      } catch (error) {\r\n        // 错误处理\r\n        console.error('登录请求失败:', error)\r\n      }\r\n    },\r\n\r\n    // 退出登录操作\r\n    async logoutUser ({ commit }) {\r\n      commit('cleanUser') // 清空 Vuex 中的用户信息\r\n      // 退出登录后清空本地存储\r\n      localStorage.removeItem('user')\r\n    },\r\n\r\n    // 恢复登录状态（例如刷新页面时）\r\n    checkUserLogin ({ commit }) {\r\n      const user = JSON.parse(localStorage.getItem('user'))\r\n      if (user) {\r\n        commit('setUser', user) // 从 localStorage 恢复用户信息\r\n      }\r\n    }\r\n  },\r\n  getters: {\r\n    // 获取当前登录的用户信息\r\n    getUserInfo (state) {\r\n      return state.userinfo\r\n    }\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,aAAa;AAElC,eAAe;EACbC,UAAU,EAAE,IAAI;EAChBC,KAAKA,CAAA,EAAI;IACP,OAAO;MACL;MACAC,QAAQ,EAAE;QACRC,MAAM,EAAE,EAAE;QACVC,QAAQ,EAAE,EAAE;QACZC,KAAK,EAAE;MACT;IACF,CAAC;EACH,CAAC;EACDC,SAAS,EAAE;IACT;IACAC,OAAOA,CAAEN,KAAK,EAAEO,IAAI,EAAE;MACpBP,KAAK,CAACC,QAAQ,GAAGM,IAAI;IACvB,CAAC;IACD;IACAC,SAASA,CAAER,KAAK,EAAE;MAChBA,KAAK,CAACC,QAAQ,GAAG;QAAEC,MAAM,EAAE,EAAE;QAAEC,QAAQ,EAAE,EAAE;QAAEC,KAAK,EAAE;MAAG,CAAC;IAC1D;EACF,CAAC;EACDK,OAAO,EAAE;IACP;IACA,MAAMC,SAASA,CAAE;MAAEC;IAAO,CAAC,EAAEC,eAAe,EAAE;MAC5C,IAAI;QACF,MAAMC,GAAG,GAAG,MAAMf,QAAQ,CAACc,eAAe,CAACR,KAAK,EAAEQ,eAAe,CAACE,QAAQ,CAAC;QAC3E,IAAID,GAAG,IAAIA,GAAG,CAACX,MAAM,EAAE;UACrB;UACAS,MAAM,CAAC,SAAS,EAAE;YAChBT,MAAM,EAAEW,GAAG,CAACX,MAAM;YAClBC,QAAQ,EAAEU,GAAG,CAACV,QAAQ;YACtBC,KAAK,EAAES,GAAG,CAACT;UACb,CAAC,CAAC;UACF;UACAW,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACL,GAAG,CAAC,CAAC;QACnD,CAAC,MAAM;UACL;UACAM,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;QAC9B;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACd;QACAF,OAAO,CAACE,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;MACjC;IACF,CAAC;IAED;IACA,MAAMC,UAAUA,CAAE;MAAEX;IAAO,CAAC,EAAE;MAC5BA,MAAM,CAAC,WAAW,CAAC,EAAC;MACpB;MACAI,YAAY,CAACQ,UAAU,CAAC,MAAM,CAAC;IACjC,CAAC;IAED;IACAC,cAAcA,CAAE;MAAEb;IAAO,CAAC,EAAE;MAC1B,MAAMJ,IAAI,GAAGU,IAAI,CAACQ,KAAK,CAACV,YAAY,CAACW,OAAO,CAAC,MAAM,CAAC,CAAC;MACrD,IAAInB,IAAI,EAAE;QACRI,MAAM,CAAC,SAAS,EAAEJ,IAAI,CAAC,EAAC;MAC1B;IACF;EACF,CAAC;EACDoB,OAAO,EAAE;IACP;IACAC,WAAWA,CAAE5B,KAAK,EAAE;MAClB,OAAOA,KAAK,CAACC,QAAQ;IACvB;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}